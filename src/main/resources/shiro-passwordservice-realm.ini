[main]
# passwordService 使用 DefaultPasswordService，如果有必要也可以自定义
passwordService=org.apache.shiro.authc.credential.DefaultPasswordService
# hashService 定义散列密码使用的 HashService，默认使用 DefaultHashService（默认 SHA-256 算法）
# hashService=org.apache.shiro.crypto.hash.DefaultHashService
# passwordService.hashService=$hashService
# hashFormat 用于对散列出的值进行格式化，默认使用 Shiro1CryptFormat，另外提供了 Base64Format 和 HexFormat，对于有 salt 的密码请自定义实现 ParsableHashFormat 然后把 salt 格式化到散列值中；
# hashFormat=org.apache.shiro.crypto.hash.format.Shiro1CryptFormat
# passwordService.hashFormat=$hashFormat
# hashFormatFactory 用于根据散列值得到散列的密码和 salt；因为如果使用如 SHA 算法，那么会生成一个 salt，此 salt 需要保存到散列后的值中以便之后与传入的密码比较时使用；默认使用 DefaultHashFormatFactory；
# hashFormatFactory=org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory
# passwordService.hashFormatFactory=$hashFormatFactory
# passwordMatcher 使用 PasswordMatcher，其是一个 CredentialsMatcher 实现；
passwordMatcher=org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService=$passwordService
# 将 credentialsMatcher 赋值给 myRealm，myRealm 间接继承了 AuthenticatingRealm，其在调用 getAuthenticationInfo 方法获取到 AuthenticationInfo 信息后，会使用 credentialsMatcher 来验证凭据是否匹配，如果不匹配将抛出 IncorrectCredentialsException 异常。
customRealm=com.gx.shiro.realm.CustomRealmPasswordService
customRealm.passwordService=$passwordService
customRealm.credentialsMatcher=$passwordMatcher
securityManager.realms=$customRealm